#!/usr/bin/env python
# -*- coding: utf-8 -*-
 
import rospy
import sys
import signal
import std_msgs.msg
import serial
import time
import threading 
from std_msgs.msg import Int32
from std_msgs.msg import String
from std_msgs.msg import Float64
from geometry_msgs.msg import Twist
import struct
import math
import pynmea2

"""
解析GNSS获取的流数据
"""
streamreader = pynmea2.NMEAStreamReader()
"""
解析后的对象包含的属性
(('Timestamp', 'timestamp', <function timestamp at 0x0000017330BA70D8>), ('Status', 'status'), ('Latitude', 'lat'), ('Latitude Direction', 'lat_dir'), 
('Longitude', 'lon'), ('Longitude Direction', 'lon_dir'), ('Speed Over Ground', 'spd_over_grnd', <class 'float'>), ('True Course', 'true_course', <class 'float'>), 
('Datestamp', 'datestamp', <function datestamp at 0x0000017330BC3558>), ('Magnetic Variation', 'mag_variation'), ('Magnetic Variation Direction', 'mag_var_dir'))
"""



# 阻塞监听话题线程
def thread_job():
    rospy.spin()

# 退出程序执行
def sigint_handler(signal, frame):   
    print(" ")
    print("Interrupt!\n")
    print("Terminated")
    ser.flush()
    time.sleep(1)
    if ser.isOpen():
        ser.close()
    sys.exit(0)

#serial init
node_name='GNSS_node' 
serialPort = "/dev/ttyUSB1"
baudRate = 38400
ser = serial.Serial(serialPort, baudRate)
serial.bytesize = 8
serial.stopbits = 1
print("GNSS serial port is %s ,baudRate is %d" % (serialPort, baudRate))
signal.signal(signal.SIGINT, sigint_handler)

def communication():
    lon = "0"
    lat = "0"
    rospy.init_node(node_name, anonymous=True)  
    print("init_node:",node_name)

    # 发布话题
    gnss_lon_pub = rospy.Publisher("/gnss/lon", String, queue_size= 10)   # 经度发布
    gnss_lat_pub = rospy.Publisher("/gnss/lat", String, queue_size= 10)   # 纬度发布
    
    # 订阅话题spin线程
    add_thread = threading.Thread(target = thread_job)
    add_thread.start()

    rate = rospy.Rate(2)
    global ser
    count=0
    while not rospy.is_shutdown():
        try:
            if count!=0:
                ser = serial.Serial(serialPort, baudRate)
                print("restart GNSS serial")
                ser.timeout = 2
            count+=1
            while not rospy.is_shutdown():
                
                data_generator = ser.read(ser.in_waiting)
                #print(data_generator)
                for data in data_generator:
                    for msg in streamreader.next(data.decode()):
                        if (msg.identifier() == 'GNRMC,'):
                            #print(msg.lon)
                            #print({msg.lat})
                            #     print( {msg.datestamp}-{msg.timestamp})
                            #     print({msg.spd_over_grnd})
                            #     print({msg.true_course})
                            #     print({msg.mag_variation})
                            #     print({msg.mag_var_dir}
                            print(msg.status)
                            filename = 'gps_value.txt'
                            with open(filename, 'a') as file_object:
                                file_object.write(msg.status)
                                file_object.write(' ')
                                file_object.write(str(msg.timestamp))
                                file_object.write(' ')
                                file_object.write(str(msg.lon))
                                file_object.write(' ')
                                file_object.write(str(msg.lat))
                                file_object.write('\n')
                            if(msg.status == 'V'):
                                # print("推荐定位信息无效", msg)      
                                lon = "0"
                                lat = "0"
                            else:
                                lon = msg.lon
                                lat = msg.lat              
                gnss_lon_pub.publish(lon.encode("utf-8"))
                gnss_lat_pub.publish(lat.encode("utf-8"))                                           
                rate.sleep()
                
        except Exception as e:
            print("gnss have a serial error:",e)
            print(lon, lat)
            if ser.isOpen():
                ser.close()       


if __name__ == '__main__':
    communication()
 
 
########################